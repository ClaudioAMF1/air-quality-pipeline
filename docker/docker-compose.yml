networks:
  mybridge:
    driver: bridge

services:
  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mybridge

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - mybridge

  # Redis
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mybridge

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - mybridge

  # MinIO
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - mybridge

  # API Flask
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - rabbitmq
      - minio
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - MINIO_ENDPOINT=http://minio:9000
    networks:
      - mybridge

  # Streamlit
  streamlit:
    build:
      context: ../streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "8501:8501"
    depends_on:
      - redis
      - api
    environment:
      - API_BASE_URL=http://api:5000/api
    networks:
      - mybridge

  # Airflow
  airflow:
    image: apache/airflow:2.7.1-python3.9
    container_name: airflow
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__FERNET_KEY: 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGqv6p-oNjvQE='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'my-secret-key'
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../data:/opt/airflow/data  # MAPEAMENTO DA PASTA DATA
      - airflow_logs:/opt/airflow/logs
    command: >
      bash -c "
        pip install kafka-python redis boto3 pika pandas &&
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
        airflow standalone
      "
    depends_on:
      - kafka
      - redis
      - rabbitmq
      - minio
    networks:
      - mybridge

volumes:
  minio_data:
  airflow_logs: